# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class KafkaDeliveryConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, num_partitions: int=None, clean_up_policy: str=None, compression_type: str=None, retention_bytes: int=None, retention_ms: int=None):  # noqa: E501
        """KafkaDeliveryConfiguration - a model defined in Swagger

        :param num_partitions: The num_partitions of this KafkaDeliveryConfiguration.  # noqa: E501
        :type num_partitions: int
        :param clean_up_policy: The clean_up_policy of this KafkaDeliveryConfiguration.  # noqa: E501
        :type clean_up_policy: str
        :param compression_type: The compression_type of this KafkaDeliveryConfiguration.  # noqa: E501
        :type compression_type: str
        :param retention_bytes: The retention_bytes of this KafkaDeliveryConfiguration.  # noqa: E501
        :type retention_bytes: int
        :param retention_ms: The retention_ms of this KafkaDeliveryConfiguration.  # noqa: E501
        :type retention_ms: int
        """
        self.swagger_types = {
            'num_partitions': int,
            'clean_up_policy': str,
            'compression_type': str,
            'retention_bytes': int,
            'retention_ms': int
        }

        self.attribute_map = {
            'num_partitions': 'numPartitions',
            'clean_up_policy': 'cleanUpPolicy',
            'compression_type': 'compressionType',
            'retention_bytes': 'retentionBytes',
            'retention_ms': 'retentionMs'
        }
        self._num_partitions = num_partitions
        self._clean_up_policy = clean_up_policy
        self._compression_type = compression_type
        self._retention_bytes = retention_bytes
        self._retention_ms = retention_ms

    @classmethod
    def from_dict(cls, dikt) -> 'KafkaDeliveryConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KafkaDeliveryConfiguration of this KafkaDeliveryConfiguration.  # noqa: E501
        :rtype: KafkaDeliveryConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_partitions(self) -> int:
        """Gets the num_partitions of this KafkaDeliveryConfiguration.

        Number of partitions  # noqa: E501

        :return: The num_partitions of this KafkaDeliveryConfiguration.
        :rtype: int
        """
        return self._num_partitions

    @num_partitions.setter
    def num_partitions(self, num_partitions: int):
        """Sets the num_partitions of this KafkaDeliveryConfiguration.

        Number of partitions  # noqa: E501

        :param num_partitions: The num_partitions of this KafkaDeliveryConfiguration.
        :type num_partitions: int
        """

        self._num_partitions = num_partitions

    @property
    def clean_up_policy(self) -> str:
        """Gets the clean_up_policy of this KafkaDeliveryConfiguration.

        cleanUpPolicy is based on cleanup.policy defined in the Kafka Documentation [15].   # noqa: E501

        :return: The clean_up_policy of this KafkaDeliveryConfiguration.
        :rtype: str
        """
        return self._clean_up_policy

    @clean_up_policy.setter
    def clean_up_policy(self, clean_up_policy: str):
        """Sets the clean_up_policy of this KafkaDeliveryConfiguration.

        cleanUpPolicy is based on cleanup.policy defined in the Kafka Documentation [15].   # noqa: E501

        :param clean_up_policy: The clean_up_policy of this KafkaDeliveryConfiguration.
        :type clean_up_policy: str
        """
        if clean_up_policy is None:
            raise ValueError("Invalid value for `clean_up_policy`, must not be `None`")  # noqa: E501

        self._clean_up_policy = clean_up_policy

    @property
    def compression_type(self) -> str:
        """Gets the compression_type of this KafkaDeliveryConfiguration.

         compressionType is based on compression.type defined in the Kafka Documentation [15] .  # noqa: E501

        :return: The compression_type of this KafkaDeliveryConfiguration.
        :rtype: str
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type: str):
        """Sets the compression_type of this KafkaDeliveryConfiguration.

         compressionType is based on compression.type defined in the Kafka Documentation [15] .  # noqa: E501

        :param compression_type: The compression_type of this KafkaDeliveryConfiguration.
        :type compression_type: str
        """
        if compression_type is None:
            raise ValueError("Invalid value for `compression_type`, must not be `None`")  # noqa: E501

        self._compression_type = compression_type

    @property
    def retention_bytes(self) -> int:
        """Gets the retention_bytes of this KafkaDeliveryConfiguration.

         retentionBytes is based on retention.bytes defined in the Kafka Documentation [15] . This attribute is applicable ONLY when cleanUpPolicy is set to DELETE  # noqa: E501

        :return: The retention_bytes of this KafkaDeliveryConfiguration.
        :rtype: int
        """
        return self._retention_bytes

    @retention_bytes.setter
    def retention_bytes(self, retention_bytes: int):
        """Sets the retention_bytes of this KafkaDeliveryConfiguration.

         retentionBytes is based on retention.bytes defined in the Kafka Documentation [15] . This attribute is applicable ONLY when cleanUpPolicy is set to DELETE  # noqa: E501

        :param retention_bytes: The retention_bytes of this KafkaDeliveryConfiguration.
        :type retention_bytes: int
        """

        self._retention_bytes = retention_bytes

    @property
    def retention_ms(self) -> int:
        """Gets the retention_ms of this KafkaDeliveryConfiguration.

         retentionMs is based on retention.ms defined in the Kafka Documentation [15] . This attribute is applicable ONLY when cleanUpPolicy is set to DELETE  # noqa: E501

        :return: The retention_ms of this KafkaDeliveryConfiguration.
        :rtype: int
        """
        return self._retention_ms

    @retention_ms.setter
    def retention_ms(self, retention_ms: int):
        """Sets the retention_ms of this KafkaDeliveryConfiguration.

         retentionMs is based on retention.ms defined in the Kafka Documentation [15] . This attribute is applicable ONLY when cleanUpPolicy is set to DELETE  # noqa: E501

        :param retention_ms: The retention_ms of this KafkaDeliveryConfiguration.
        :type retention_ms: int
        """

        self._retention_ms = retention_ms
