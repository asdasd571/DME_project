# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_delivery_mode import DataDeliveryMode  # noqa: F401,E501
from swagger_server.models.dme_type_definition import DmeTypeDefinition  # noqa: F401,E501
from swagger_server.models.interface_description import InterfaceDescription  # noqa: F401,E501
from swagger_server import util


class DmeTypeRelatedCapabilities(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, dme_type_definition: DmeTypeDefinition=None, registration_id: str=None, constraints: object=None, data_access_endpoint: InterfaceDescription=None, data_delivery_modes: List[DataDeliveryMode]=None):  # noqa: E501
        """DmeTypeRelatedCapabilities - a model defined in Swagger

        :param dme_type_definition: The dme_type_definition of this DmeTypeRelatedCapabilities.  # noqa: E501
        :type dme_type_definition: DmeTypeDefinition
        :param registration_id: The registration_id of this DmeTypeRelatedCapabilities.  # noqa: E501
        :type registration_id: str
        :param constraints: The constraints of this DmeTypeRelatedCapabilities.  # noqa: E501
        :type constraints: object
        :param data_access_endpoint: The data_access_endpoint of this DmeTypeRelatedCapabilities.  # noqa: E501
        :type data_access_endpoint: InterfaceDescription
        :param data_delivery_modes: The data_delivery_modes of this DmeTypeRelatedCapabilities.  # noqa: E501
        :type data_delivery_modes: List[DataDeliveryMode]
        """
        self.swagger_types = {
            'dme_type_definition': DmeTypeDefinition,
            'registration_id': str,
            'constraints': object,
            'data_access_endpoint': InterfaceDescription,
            'data_delivery_modes': List[DataDeliveryMode]
        }

        self.attribute_map = {
            'dme_type_definition': 'dmeTypeDefinition',
            'registration_id': 'registrationId',
            'constraints': 'constraints',
            'data_access_endpoint': 'dataAccessEndpoint',
            'data_delivery_modes': 'dataDeliveryModes'
        }
        self._dme_type_definition = dme_type_definition
        self._registration_id = registration_id
        self._constraints = constraints
        self._data_access_endpoint = data_access_endpoint
        self._data_delivery_modes = data_delivery_modes

    @classmethod
    def from_dict(cls, dikt) -> 'DmeTypeRelatedCapabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DmeTypeRelatedCapabilities of this DmeTypeRelatedCapabilities.  # noqa: E501
        :rtype: DmeTypeRelatedCapabilities
        """
        return util.deserialize_model(dikt, cls)

    def __init__(self, registrationId, dmeTypeDefinition, dataAccessEndpoint, dataDeliveryModes, metadata=None):
        self.registrationId = registrationId
        self.dmeTypeDefinition = dmeTypeDefinition
        self.dataAccessEndpoint = dataAccessEndpoint
        self.dataDeliveryModes = dataDeliveryModes
        self.metadata = metadata or {}

    def to_dict(self):
        return {
            "registrationId": self.registrationId,
            "dmeTypeDefinition": vars(self.dmeTypeDefinition),
            "dataAccessEndpoint": self.dataAccessEndpoint,
            "dataDeliveryModes": self.dataDeliveryModes,
            "metadata": self.metadata
        }

    @property
    def dme_type_definition(self) -> DmeTypeDefinition:
        """Gets the dme_type_definition of this DmeTypeRelatedCapabilities.


        :return: The dme_type_definition of this DmeTypeRelatedCapabilities.
        :rtype: DmeTypeDefinition
        """
        return self._dme_type_definition

    @dme_type_definition.setter
    def dme_type_definition(self, dme_type_definition: DmeTypeDefinition):
        """Sets the dme_type_definition of this DmeTypeRelatedCapabilities.


        :param dme_type_definition: The dme_type_definition of this DmeTypeRelatedCapabilities.
        :type dme_type_definition: DmeTypeDefinition
        """
        if dme_type_definition is None:
            raise ValueError("Invalid value for `dme_type_definition`, must not be `None`")  # noqa: E501

        self._dme_type_definition = dme_type_definition

    @property
    def registration_id(self) -> str:
        """Gets the registration_id of this DmeTypeRelatedCapabilities.

        A successful registration identified by registrationId   # noqa: E501

        :return: The registration_id of this DmeTypeRelatedCapabilities.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id: str):
        """Sets the registration_id of this DmeTypeRelatedCapabilities.

        A successful registration identified by registrationId   # noqa: E501

        :param registration_id: The registration_id of this DmeTypeRelatedCapabilities.
        :type registration_id: str
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")  # noqa: E501

        self._registration_id = registration_id

    @property
    def constraints(self) -> object:
        """Gets the constraints of this DmeTypeRelatedCapabilities.

        Formulates producer constraints or constraints applicable to the consumption related to the DME type based on the dataProductionSchema  # noqa: E501

        :return: The constraints of this DmeTypeRelatedCapabilities.
        :rtype: object
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: object):
        """Sets the constraints of this DmeTypeRelatedCapabilities.

        Formulates producer constraints or constraints applicable to the consumption related to the DME type based on the dataProductionSchema  # noqa: E501

        :param constraints: The constraints of this DmeTypeRelatedCapabilities.
        :type constraints: object
        """

        self._constraints = constraints

    @property
    def data_access_endpoint(self) -> InterfaceDescription:
        """Gets the data_access_endpoint of this DmeTypeRelatedCapabilities.


        :return: The data_access_endpoint of this DmeTypeRelatedCapabilities.
        :rtype: InterfaceDescription
        """
        return self._data_access_endpoint

    @data_access_endpoint.setter
    def data_access_endpoint(self, data_access_endpoint: InterfaceDescription):
        """Sets the data_access_endpoint of this DmeTypeRelatedCapabilities.


        :param data_access_endpoint: The data_access_endpoint of this DmeTypeRelatedCapabilities.
        :type data_access_endpoint: InterfaceDescription
        """
        if data_access_endpoint is None:
            raise ValueError("Invalid value for `data_access_endpoint`, must not be `None`")  # noqa: E501

        self._data_access_endpoint = data_access_endpoint

    @property
    def data_delivery_modes(self) -> List[DataDeliveryMode]:
        """Gets the data_delivery_modes of this DmeTypeRelatedCapabilities.


        :return: The data_delivery_modes of this DmeTypeRelatedCapabilities.
        :rtype: List[DataDeliveryMode]
        """
        return self._data_delivery_modes

    @data_delivery_modes.setter
    def data_delivery_modes(self, data_delivery_modes: List[DataDeliveryMode]):
        """Sets the data_delivery_modes of this DmeTypeRelatedCapabilities.


        :param data_delivery_modes: The data_delivery_modes of this DmeTypeRelatedCapabilities.
        :type data_delivery_modes: List[DataDeliveryMode]
        """
        if data_delivery_modes is None:
            raise ValueError("Invalid value for `data_delivery_modes`, must not be `None`")  # noqa: E501

        self._data_delivery_modes = data_delivery_modes
