# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.server_address_with_port import ServerAddressWithPort  # noqa: F401,E501
from swagger_server import util


class StreamingConfigurationKafka(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, topic_name: str=None, kafka_bootstrap_servers: List[ServerAddressWithPort]=None):  # noqa: E501
        """StreamingConfigurationKafka - a model defined in Swagger

        :param topic_name: The topic_name of this StreamingConfigurationKafka.  # noqa: E501
        :type topic_name: str
        :param kafka_bootstrap_servers: The kafka_bootstrap_servers of this StreamingConfigurationKafka.  # noqa: E501
        :type kafka_bootstrap_servers: List[ServerAddressWithPort]
        """
        self.swagger_types = {
            'topic_name': str,
            'kafka_bootstrap_servers': List[ServerAddressWithPort]
        }

        self.attribute_map = {
            'topic_name': 'topicName',
            'kafka_bootstrap_servers': 'kafkaBootstrapServers'
        }
        self._topic_name = topic_name
        self._kafka_bootstrap_servers = kafka_bootstrap_servers

    @classmethod
    def from_dict(cls, dikt) -> 'StreamingConfigurationKafka':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StreamingConfigurationKafka of this StreamingConfigurationKafka.  # noqa: E501
        :rtype: StreamingConfigurationKafka
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_name(self) -> str:
        """Gets the topic_name of this StreamingConfigurationKafka.

        Name of the Kafka topic  # noqa: E501

        :return: The topic_name of this StreamingConfigurationKafka.
        :rtype: str
        """
        return self._topic_name

    @topic_name.setter
    def topic_name(self, topic_name: str):
        """Sets the topic_name of this StreamingConfigurationKafka.

        Name of the Kafka topic  # noqa: E501

        :param topic_name: The topic_name of this StreamingConfigurationKafka.
        :type topic_name: str
        """
        if topic_name is None:
            raise ValueError("Invalid value for `topic_name`, must not be `None`")  # noqa: E501

        self._topic_name = topic_name

    @property
    def kafka_bootstrap_servers(self) -> List[ServerAddressWithPort]:
        """Gets the kafka_bootstrap_servers of this StreamingConfigurationKafka.

        Server configuration  # noqa: E501

        :return: The kafka_bootstrap_servers of this StreamingConfigurationKafka.
        :rtype: List[ServerAddressWithPort]
        """
        return self._kafka_bootstrap_servers

    @kafka_bootstrap_servers.setter
    def kafka_bootstrap_servers(self, kafka_bootstrap_servers: List[ServerAddressWithPort]):
        """Sets the kafka_bootstrap_servers of this StreamingConfigurationKafka.

        Server configuration  # noqa: E501

        :param kafka_bootstrap_servers: The kafka_bootstrap_servers of this StreamingConfigurationKafka.
        :type kafka_bootstrap_servers: List[ServerAddressWithPort]
        """
        if kafka_bootstrap_servers is None:
            raise ValueError("Invalid value for `kafka_bootstrap_servers`, must not be `None`")  # noqa: E501

        self._kafka_bootstrap_servers = kafka_bootstrap_servers
