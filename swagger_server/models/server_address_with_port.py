# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ServerAddressWithPort(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, hostname: str=None, port_address: int=None):  # noqa: E501
        """ServerAddressWithPort - a model defined in Swagger

        :param hostname: The hostname of this ServerAddressWithPort.  # noqa: E501
        :type hostname: str
        :param port_address: The port_address of this ServerAddressWithPort.  # noqa: E501
        :type port_address: int
        """
        self.swagger_types = {
            'hostname': str,
            'port_address': int
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'port_address': 'portAddress'
        }
        self._hostname = hostname
        self._port_address = port_address

    @classmethod
    def from_dict(cls, dikt) -> 'ServerAddressWithPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServerAddressWithPort of this ServerAddressWithPort.  # noqa: E501
        :rtype: ServerAddressWithPort
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self) -> str:
        """Gets the hostname of this ServerAddressWithPort.

        string identifying a hostname shall be formatted according to clause 2.3.1 as defined in IETF RFC 1035 [19]  # noqa: E501

        :return: The hostname of this ServerAddressWithPort.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: str):
        """Sets the hostname of this ServerAddressWithPort.

        string identifying a hostname shall be formatted according to clause 2.3.1 as defined in IETF RFC 1035 [19]  # noqa: E501

        :param hostname: The hostname of this ServerAddressWithPort.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def port_address(self) -> int:
        """Gets the port_address of this ServerAddressWithPort.

        Port address, e.g. 9092  # noqa: E501

        :return: The port_address of this ServerAddressWithPort.
        :rtype: int
        """
        return self._port_address

    @port_address.setter
    def port_address(self, port_address: int):
        """Sets the port_address of this ServerAddressWithPort.

        Port address, e.g. 9092  # noqa: E501

        :param port_address: The port_address of this ServerAddressWithPort.
        :type port_address: int
        """
        if port_address is None:
            raise ValueError("Invalid value for `port_address`, must not be `None`")  # noqa: E501

        self._port_address = port_address
